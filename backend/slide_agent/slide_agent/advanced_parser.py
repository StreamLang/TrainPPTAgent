#!/usr/bin/env python
# -*- coding: utf-8 -*-
# @Date  : 2025/9/16 10:00
# @File  : advanced_parser.py
# @Author: 
# @Contact : 
# @Desc  : 高级Markdown解析器，支持从Markdown中提取详细内容说明

import json
import re

def parse_markdown_to_slides_advanced(markdown_text):
    """
    高级解析Markdown文本为幻灯片结构，支持从Markdown中提取详细内容说明
    约定：
    1. # 标题下的 @ 开头文本为章节详细说明
    2. - 列表项后的 @ 开头文本为项目详细说明
    3. 根据标题层级不同，@文本对应不同的type
    
    :param markdown_text: Markdown文本
    :return: 幻灯片结构列表
    """
    slides = []
    lines = markdown_text.strip().split('\n')
    
    # 预处理：将连续的@行合并为段落
    processed_lines = []
    i = 0
    while i < len(lines):
        line = lines[i].strip()
        if line.startswith('@'):
            # 合并连续的@行
            description_lines = []
            while i < len(lines) and lines[i].strip().startswith('@'):
                description_lines.append(lines[i].strip()[1:].strip())  # 去掉@符号
                i += 1
            processed_lines.append('@' + ' '.join(description_lines))
            continue
        else:
            processed_lines.append(line)
            i += 1
    
    lines = processed_lines

    # Find title and its description
    main_title = ""
    main_description = ""
    for i, line in enumerate(lines):
        if line.startswith('# '):
            main_title = line[2:].strip()
            # 查找下一个@行作为描述
            j = i + 1
            while j < len(lines):
                if lines[j].startswith('#'):
                    break
                if lines[j].startswith('@'):
                    main_description = lines[j][1:].strip()  # 去掉@符号
                    break
                j += 1
            slides.append({"type": "cover", "data": {"title": main_title, "text": main_description if main_description else "A presentation generated by AI"}})
            break

    # Find sections for contents page
    sections = []
    section_descriptions = {}  # 存储章节描述
    i = 0
    while i < len(lines):
        line = lines[i]
        if line.startswith('## '):
            section_title = line[3:].strip()
            sections.append(section_title)
            # 查找该章节的描述
            j = i + 1
            while j < len(lines):
                if lines[j].startswith('##') or lines[j].startswith('#'):
                    break
                if lines[j].startswith('@'):
                    section_descriptions[section_title] = lines[j][1:].strip()  # 去掉@符号
                    break
                j += 1
        i += 1
        
    if sections:
        slides.append({"type": "contents", "data": {"items": sections}})

    # Process each section and its subsections
    current_section_title = ""
    current_subsection_title = ""
    current_items = []
    current_item_descriptions = {}  # 存储项目描述

    i = 0
    while i < len(lines):
        line = lines[i].strip()
        if line.startswith('## '):
            # 处理上一个子章节
            if current_subsection_title:
                slide_items = []
                for item in current_items:
                    slide_items.append({
                        "title": item, 
                        "text": current_item_descriptions.get(item, f"Detailed content about {item}")
                    })
                slides.append({"type": "content", "data": {"title": current_subsection_title, "items": slide_items}})
                current_items = []
                current_item_descriptions = {}

            current_section_title = line[3:].strip()
            current_subsection_title = ""
            # 添加过渡页，使用章节描述（如果有的话）
            transition_text = section_descriptions.get(current_section_title, f"Exploring the topic of {current_section_title}")
            slides.append({"type": "transition", "data": {"title": current_section_title, "text": transition_text}})
        elif line.startswith('### '):
            # 处理上一个子章节
            if current_subsection_title:
                slide_items = []
                for item in current_items:
                    slide_items.append({
                        "title": item, 
                        "text": current_item_descriptions.get(item, f"Detailed content about {item}")
                    })
                slides.append({"type": "content", "data": {"title": current_subsection_title, "items": slide_items}})
                current_items = []
                current_item_descriptions = {}
            current_subsection_title = line[4:].strip()
        elif line.startswith('- '):
            if current_subsection_title:
                item_title = line[2:].strip()
                current_items.append(item_title)
                # 查找该项目的描述
                j = i + 1
                while j < len(lines):
                    if lines[j].startswith('-') or lines[j].startswith('#'):
                        break
                    if lines[j].startswith('@'):
                        current_item_descriptions[item_title] = lines[j][1:].strip()  # 去掉@符号
                        break
                    j += 1
        i += 1

    # 处理最后一个子章节
    if current_subsection_title:
        slide_items = []
        for item in current_items:
            slide_items.append({
                "title": item, 
                "text": current_item_descriptions.get(item, f"Detailed content about {item}")
            })
        slides.append({"type": "content", "data": {"title": current_subsection_title, "items": slide_items}})

    slides.append({"type": "end"})
    return slides

if __name__ == '__main__':
    # 测试示例
    test_markdown = """# 2025科技前沿动态
@探索2025年科技领域的最新突破与发展趋势

## 人工智能新突破
@人工智能在2025年取得了重大进展，从大语言模型到量子计算，多个领域都有重要突破

### 大语言模型的进化
@大语言模型在2025年实现了质的飞跃，不仅在性能上大幅提升，还在多模态处理和推理能力方面取得了重要进展

- 多模态大模型实现文本、图像、音频的深度融合理解
@这些模型能够同时处理和理解多种类型的数据，为更复杂的AI应用奠定了基础

- 参数效率优化，降低训练成本的同时提升性能
@通过创新的架构设计和训练方法，新一代模型在保持高性能的同时显著降低了计算资源需求

- 自主推理和规划能力增强，接近人类思维方式
@模型现在能够进行更复杂的逻辑推理和长期规划，为通用人工智能的发展迈出了重要一步"""
    
    slides = parse_markdown_to_slides_advanced(test_markdown)
    print(json.dumps(slides, indent=2, ensure_ascii=False))